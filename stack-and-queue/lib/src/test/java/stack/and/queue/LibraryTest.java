/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package stack.and.queue;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.io.ByteArrayOutputStream;
import java.io.PrintStream;

import static org.junit.jupiter.api.Assertions.*;

class LibraryTest {
    @Test void someLibraryMethodReturnsTrue() {
    }
}
class StackTest{
    @Test void testPush(){
        Stack<Integer> stack=new Stack<>();
        stack.push(12);
        int result=12;
        assertEquals(result,stack.peek());
    }
    @Test void testPush2(){
        Stack<Integer> stack=new Stack<>();
        stack.push(12);
        stack.push(13);
        stack.push(14);
        stack.push(15);
        assertNotNull(stack);
        int result1=stack.pop();
        int result6=stack.peek();
        boolean result8= stack.isEmpty();
        int result2=stack.pop();
        int result5=stack.peek();
        int result3=stack.pop();
        int result4=stack.pop();
        boolean result7= stack.isEmpty();
        assertEquals(15,result1);
        assertEquals(14,result2);
        assertEquals(13,result3);
        assertEquals(12,result4);
        assertEquals(13,result5);
        assertEquals(14,result6);
        assertFalse(result8);
        assertTrue(result7);
    }
    private final PrintStream standardOut = System.out;
    private final ByteArrayOutputStream outputStreamCaptor = new ByteArrayOutputStream();
    @BeforeEach
    public void setUp() {
        System.setOut(new PrintStream(outputStreamCaptor));
    }
    @Test void testStackPopExeptions(){
        Stack<Integer> stack=new Stack<>();
        Integer result=stack.pop();
        assertEquals("stack is empty", outputStreamCaptor.toString().trim());
    }
    @AfterEach
    public void tearDown() {
        System.setOut(standardOut);
    }
    @BeforeEach
    public void setUp1() {
        System.setOut(new PrintStream(outputStreamCaptor));
    }
    @Test void testStackPeekExeptions(){
        Stack<Integer> stack=new Stack<>();
        Integer result=stack.pop();
        assertEquals("stack is empty", outputStreamCaptor.toString().trim());

    }
    @AfterEach
    public void tearDown1() {
        System.setOut(standardOut);
    }


    }
    class QueueTest{
    @Test void testQueue1(){
        Queue<Integer>queue=new Queue();
        queue.enqueue(12);
        int result=queue.peek();
        assertEquals(result,12);
    }
        @Test void testQueue2(){
            Queue<Integer>queue=new Queue();
            queue.enqueue(12);
            queue.enqueue(13);
            queue.enqueue(14);
            queue.enqueue(15);
            assertNotNull(queue);
            int result1=queue.dequeue();
            int result6=queue.peek();
            boolean result8= queue.isEmpty();
            int result2=queue.dequeue();
            int result5=queue.peek();
            int result3=queue.dequeue();
            int result4=queue.dequeue();
            boolean result7= queue.isEmpty();
            assertEquals(12,result1);
            assertEquals(13,result2);
            assertEquals(14,result3);
            assertEquals(15,result4);
            assertEquals(14,result5);
            assertEquals(13,result6);
            assertFalse(result8);
            assertTrue(result7);
        }

        private final PrintStream standardOut = System.out;
        private final ByteArrayOutputStream outputStreamCaptor = new ByteArrayOutputStream();
        @BeforeEach
        public void setUp() {
            System.setOut(new PrintStream(outputStreamCaptor));
        }
        @Test void testQueueDequeueExeptions(){
            Queue<Integer>queue=new Queue();
            Integer result=queue.dequeue();
            assertEquals("The Queue is empty", outputStreamCaptor.toString().trim());
        }
        @AfterEach
        public void tearDown() {
            System.setOut(standardOut);
        }
        @BeforeEach
        public void setUp1() {
            System.setOut(new PrintStream(outputStreamCaptor));
        }
        @Test void testQueuePeekExeptions(){
            Queue<Integer>queue=new Queue();
            Integer result=queue.dequeue();
            assertEquals("The Queue is empty", outputStreamCaptor.toString().trim());

        }
        @AfterEach
        public void tearDown1() {
            System.setOut(standardOut);
        }


    }

